{
    "contents" : "#import libraries\nlibrary(timeDate)\nlibrary(randomForest)\n\n\n#set options to make sure scientific notation is disabled when writing files\noptions(scipen=500)\n\n\n#read in data\ndfStore <- read.csv(file='~/project/data/samplestores.csv')\ndfTrain <- read.csv(file='~/project/data/training.csv')\ndfTest <- read.csv(file='~/project/data/testing.csv')\ndfFeatures <- read.csv(file='~/project/data/storefeatures.csv')\nsubmission = read.csv(file='~/project/data/sampleoutput.csv',header=TRUE,as.is=TRUE)\n\n\n# Merge Type and Size\ndfTrainTmp <- merge(x=dfTrain, y=dfStore, all.x=TRUE)\ndfTestTmp <- merge(x=dfTest, y=dfStore, all.x=TRUE)\n\n\n# Merge all the features\ntrain <- merge(x=dfTrainTmp, y=dfFeatures, all.x=TRUE)\ntest <- merge(x=dfTestTmp, y=dfFeatures, all.x=TRUE)\n\n\n# Make features for train\ntrain$year = as.numeric(substr(train$Date,1,4))\ntrain$month = as.numeric(substr(train$Date,6,7))\ntrain$day = as.numeric(substr(train$Date,9,10))\ntrain$days = (train$month-1)*30 + train$day\ntrain$Type = as.character(train$Type)\ntrain$Type[train$Type==\"A\"]=1\ntrain$Type[train$Type==\"B\"]=2\ntrain$Type[train$Type==\"C\"]=3\ntrain$IsHoliday[train$IsHoliday==\"TRUE\"]=1\ntrain$IsHoliday[train$IsHoliday==\"FALSE\"]=0\ntrain$dayHoliday = train$IsHoliday*train$days\ntrain$logsales = log(4990+train$Weekly_Sales)\n#weight certain features more by duplication\ntrain$tDays = 360*(train$year-2010) + (train$month-1)*30 + train$day\ntrain$days30 = (train$month-1)*30 + train$day\n\n\n#Make features for test\ntest$year = as.numeric(substr(test$Date,1,4))\ntest$month = as.numeric(substr(test$Date,6,7))\ntest$day = as.numeric(substr(test$Date,9,10))\ntest$days = (test$month-1)*30 + test$day\ntest$Type = as.character(test$Type)\ntest$Type[test$Type==\"A\"]=1\ntest$Type[test$Type==\"B\"]=2\ntest$Type[test$Type==\"C\"]=3\ntest$IsHoliday[test$IsHoliday==\"TRUE\"]=1\ntest$IsHoliday[test$IsHoliday==\"FALSE\"]=0\ntest$dayHoliday = test$IsHoliday*test$days\ntest$tDays = 360*(test$year-2010) + (test$month-1)*30 + test$day\ntest$days30 = (test$month-1)*30 + test$day\n\n\n#Run model\ntmpR0 = nrow(submission)\nj=1\nwhile (j < tmpR0) {\n  print(j/tmpR0)#keep track of progress\n  #select only relevant data for the store and department tuple\n  tmpId = submission$Id[j]\n  tmpStr = unlist(strsplit(tmpId,\"_\"))\n  tmpStore = tmpStr[1]\n  tmpDept = tmpStr[2]\n  dataF1 = train[train$Dept==tmpDept,]\n  tmpL = nrow(dataF1[dataF1$Store==tmpStore,])\n  #since MAE is weighted, increase weights of holiday data by 5x\n  tmpF = dataF1[dataF1$IsHoliday==1,]\n  dataF1 = rbind(dataF1,do.call(\"rbind\", replicate(4, tmpF, simplify = FALSE)))\n  dataF2 = dataF1[dataF1$Store==tmpStore,]  \n  testF1 = test[test$Dept==tmpDept,]\n  testF1 = testF1[testF1$Store==tmpStore,]\n  testRows = nrow(testF1)\n  #this model is trained on store+dept filtered data\n  tmpModel =  randomForest(logsales ~ year + month + day + days + dayHoliday + tDays + days30, \n                               ntree=200, replace=TRUE, mtry=3, data=dataF2)\n  tmpP = exp(predict(tmpModel,testF1))-4990\n  k = j + testRows - 1\n  submission$Weekly_Sales[j:k] = tmpP\n  j = k+1\n}\n\n#write the output to csv\nwrite.table(x=submission,\n            file='~/project/final/Final.csv',\n            sep=',', row.names=FALSE, quote=FALSE)\n\n",
    "created" : 1430513717379.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1985494191",
    "id" : "EADFC275",
    "lastKnownWriteTime" : 1430513970,
    "path" : "~/project/R/makeSubmission.R",
    "project_path" : "R/makeSubmission.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}